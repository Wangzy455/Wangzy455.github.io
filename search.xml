<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自学八股系列：序言</title>
      <link href="/2025/04/19/%E8%87%AA%E5%AD%A6%E5%85%AB%E8%82%A1%E7%B3%BB%E5%88%97%EF%BC%9A%E5%BA%8F%E8%A8%80/"/>
      <url>/2025/04/19/%E8%87%AA%E5%AD%A6%E5%85%AB%E8%82%A1%E7%B3%BB%E5%88%97%EF%BC%9A%E5%BA%8F%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="创作初衷"><a href="#创作初衷" class="headerlink" title="创作初衷"></a>创作初衷</h3><p>纸上得来终觉浅，绝知此事要躬行</p><p>各位读者好，很荣幸我的文字能够通过无数字节飞舞的互联网呈现在你的眼前，也让我这个即将步入互联网行业的小透明的心声可以展示给各位，下面就来说一下我为什么想写这一系列文章。</p><p>笔者刚上初中的时候，正值互联网的风口期，层出不穷的网络事物改变着我们的生活，约车，电商，短视频，人工智能等等，互联网行业处于飞速发展的上升期，高薪神话吸引了无数人前仆后继的涌入这个行业，我们漂浮在巨大的泡沫之上，但是随着互联网行业停止了最开始的野蛮增长逐渐转入平稳发展之后，当各大互联网公司不再需要人力去做原始积累的时候，计算机专业学生的就业形势远不如从前，加之疫情的影响，其它行业的不景气，大量的冷门专业毕业生，也想通过转码来保持最基本的温饱，导致了现在的就业简直卷到了极致。</p><p>笔者就是在这样的环境中进入了大学，在焦虑和迷茫中来到了大二。在过去的两年，我去了解计算机行业的很多领域，不过大部分都是浅尝辄止，连最基本的成果都没有。在大一的时候接触到了后端开发，我觉得还算可以，便慢慢决定向着这个方向学习（后面才知道这是就业最卷的领域）</p><p>当时的我每天焦虑的刷着牛客和知乎，看着前辈们进入大厂之后的经验分享和学习路线，看着面经和别人的简历，心中幻想着自己以后进入大厂之后应该怎么在朋友圈炫耀自己的offer</p><p>可是，慢慢的我觉得这并不是我想要的，现在我认识大部分同学的学习都是照着视频不断地抄代码，一个视频接着一个视频，让我想到了工厂流水线上生产出来的商品，大家都一模一样，没有瑕疵但是也没有特点，像极了在高中背诵数学大题答案的那个傻傻的自己</p><p>所以我决定不再把学习技术当做像学生时代应对一场考试那样，我决定写技术博客记录自己的思考，这个系列的文章就是尝试的开始，八股使我们面向就业的捷径，但是我不想真的像清朝八股取士那样一遍一遍的去背，而是把这个当做大纲去真正的学习，去像一个工程师一样思考</p><h3 id="创作内容"><a href="#创作内容" class="headerlink" title="创作内容"></a>创作内容</h3><p>按照我自己的想法，这是我写技术博客的一个尝试的开始，之前自己写过的博客多半是复制粘贴的知识加上一点自己的解释，或者毫无逻辑的题解，现在我想通过这写文章，记录自己的学习过程和思考，哪怕那些思考很浅薄或者很可笑</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>在这个快节奏的时代，谈梦想都是廉价的，但是我始终都告诉我自己要记得自己究竟想成为什么样的人，究竟想过怎么样的生活，与诸位共勉</p><p>最后，希望大家可以喜欢我的文章（想了好久，还是这样写结束语吧）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 自学八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自学八股：CAS和AQS</title>
      <link href="/2025/04/19/%E8%87%AA%E5%AD%A6%E5%85%AB%E8%82%A1%EF%BC%9ACAS%E5%92%8CAQS/"/>
      <url>/2025/04/19/%E8%87%AA%E5%AD%A6%E5%85%AB%E8%82%A1%EF%BC%9ACAS%E5%92%8CAQS/</url>
      
        <content type="html"><![CDATA[<h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><p>在对java并发编程的考察中CAS和AQS这两个概念的考察出现的频率是非常高的，所以本文主要通过笔者看过的文章和源码解读做一些整理和自己的思考，关于这两个概念。</p><h4 id="面试题举例"><a href="#面试题举例" class="headerlink" title="面试题举例"></a>面试题举例</h4><ul><li>java哪些地方使用到了CAS</li><li>CAS有什么问题怎么解决</li><li>AQS独占式获取\释放锁的原理</li><li>…</li></ul><h4 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h4><p>1、线程同步</p><p>在多线程环境中，<strong>协调多个线程对共享资源的访问</strong>，以确保数据的一致性和完整性。在多线程程序中，多个线程可能会同时访问和修改共享资源，如果没有适当的同步机制，可能会导致数据竞争（Race Condition）、数据不一致或死锁等问题。线程同步的目的是通过控制线程的执行顺序，确保在任意时刻只有一个线程可以访问共享资源，或者多个线程可以安全地访问共享资源。</p><p>2、线程安全</p><p>在多线程环境中，<strong>一个类或代码段能够被多个线程安全地访问，而不会导致数据不一致或错误的行为</strong>。换句话说，线程安全的代码在并发执行时，能够保证数据的完整性和一致性。</p><p>实现方法：</p><ol><li>互斥同步：synchronized，ReentrantLock</li><li>非阻塞同步：CAS，Atomic</li><li>无同步方案：栈封闭，Thread Local，可重入代码</li></ol><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>CAS本质上是通过硬件实现的，是一条CPU的原子指令，让CPU比较两个值是否相等，然后原子地更新某个位置，所以CAS是基于硬件实现的，JVM对底层的接口进行了封装，JDK中的原子类则是对这个接口进行了调用<br>这里的CAS是基于底层硬件实现的，除了在并发编程中有无锁化这种理念，其实我还觉得，这是由于虚拟机会进行指令重排</p><h4 id="CAS可能产生的问题"><a href="#CAS可能产生的问题" class="headerlink" title="CAS可能产生的问题"></a>CAS可能产生的问题</h4><ol><li><p>ABA问题</p><blockquote><p>解决方案：<br>使用版本号，每次更新变量的值的时候，就在版本号上加一Java 1.5开始，JDK的Atomic包里提供了一个类AtomicStampedReference来解决ABA问题。这个类的compareAndSet方法的作用是首先检查当前引用是否等于预期引用，并且检查当前标志是否等于预期标志，如果全部相等，则以原子方式将该引用和该标志的值设置为给定的更新值。其实在MySQL数据库中一些无锁化的处理也是这样基于版本号实现的</p></blockquote></li><li><p>循环时间长开销大</p><blockquote><p>解决方案：<br>JVM支持处理器提供的pause指令</p></blockquote></li><li><p>只能保证一个共享变量的原子操作</p><blockquote><p>解决方案：<br>通过JDK提供的AtomicReference来实现对多个共享变量的原子操作</p></blockquote></li></ol><p>底层的Unsafe类实现和原子类这里先不说了，等笔者弄明白再继续写，不过感觉Unsafe这个部分在面试中出现的频率并不高，原子类的考察则偏简单一些</p><h3 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h3><p>AQS是一个构建锁和同步器的框架，使用AQS能简单且高效地构造出应用广泛的同步器，比如ReentrantLock，Semaphore，ReentrantReadWriteLock，SynchronousQueue等</p><p>AQS作为抽象类只实现了部分逻辑（模版方法），并且使用了队列这个数据结构，具有先进先出的特性</p><h4 id="AQS的内部数据结构"><a href="#AQS的内部数据结构" class="headerlink" title="AQS的内部数据结构"></a>AQS的内部数据结构</h4><ul><li>state 同步状态</li><li>实现了一个双端队列，存储着封装成Node节点的线程，实现了一些排队和阻塞的功能</li></ul><h4 id="AQS在面试中的主要考察点"><a href="#AQS在面试中的主要考察点" class="headerlink" title="AQS在面试中的主要考察点"></a>AQS在面试中的主要考察点</h4><p><strong>AQS独占式获取&#x2F;释放锁的原理</strong></p><blockquote><p><strong>获取锁：</strong><br>1获取同步状态时，调用 acquire 方法，维护一个同步队列；<br>2使用 tryAcquire 方法安全地获取锁，如果成功返回true，失败返回false；<br>3获取失败的线程会被构造同步节点并通过 addWaiter 方法加入到同步队列的尾部；<br>4执行 acquireQueued 方法使得该节点以自旋的方式获取锁，如果获取不到则阻塞，被阻塞线程的唤醒主要依靠前驱节点的出队或被中断实现，移出队列或停止自旋的条件是前驱节点是头结点且成功获取了同步状态。<br>5成功获取锁后，将从acquireQueued方法中退出，同时返回一个boolean值表示当前线程是否被中断，若被中断，则会执行selfInterrupt方法，响应中断。<br><strong>释放锁：</strong><br>1释放同步状态时，同步器调用 tryRelease 方法释放锁；<br>2然后调用 unparkSuccessor 方法唤醒头节点的后继节点，使后继节点重新尝试获取锁。</p></blockquote><p><strong>AQS共享式获取&#x2F;释放锁的原理</strong></p><blockquote><p><strong>获取锁：</strong><br>1首先调用tryAcquireShared方法尝试获取一次共享锁，即修改state的值，若返回值&gt;&#x3D;0，则表示获取成功，线程不受影响，继续向下执行；<br>2若返回值小于0，表示获取共享锁失败，则线程需要进入到同步队列中等待，调用doAcquireShared方法。<br><strong>释放锁：</strong><br>1使用releaseShared模板方法释放锁，通过调用使用者自己实现的tryReleaseShared方法尝试释放锁，修改state的值，若返回true，表示修改成功，则继续向下调用doReleaseShared唤醒head的下一个节点对应的线程，让它开始尝试获取锁；<br>2若修改state失败，则返回false。</p></blockquote><p>这里可能还会考察通过AQS实现的一些类比如ReentranLock,这个打算放到锁的那个部分再说。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>这篇便主要讲了一下AQS和CAS可能会在面试中考察的点，说的都是可能直接问的地方，也说了一下原理，本身我对这个原理理解也不是特别的深入，这能尽自己所能了。</p><p><em>参考文章：</em></p><p><a href="https://redspider.gitbook.io/concurrent/di-er-pian-yuan-li-pian/11">https://redspider.gitbook.io/concurrent/di-er-pian-yuan-li-pian/11</a><br><a href="https://www.pdai.tech/md/java/thread/java-thread-x-juc-AtomicInteger.html#cas-%E9%97%AE%E9%A2%98">https://www.pdai.tech/md/java/thread/java-thread-x-juc-AtomicInteger.html#cas-%E9%97%AE%E9%A2%98</a><br><a href="https://www.pdai.tech/md/java/thread/java-thread-x-lock-AbstractQueuedSynchronizer.html">https://www.pdai.tech/md/java/thread/java-thread-x-lock-AbstractQueuedSynchronizer.html</a><br><a href="https://redspider.gitbook.io/concurrent/di-er-pian-yuan-li-pian/11">https://redspider.gitbook.io/concurrent/di-er-pian-yuan-li-pian/11</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 自学八股 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夜思</title>
      <link href="/2024/11/10/%E5%A4%9C%E6%80%9D/"/>
      <url>/2024/11/10/%E5%A4%9C%E6%80%9D/</url>
      
        <content type="html"><![CDATA[<p>今天是2024年11月10日，上午十点刚刚考完中级软件设计师的考试，题目难度尚可，在略显拥挤的机房里完成了自己的第一次的考证时刻。</p><p>或许这个证的作用没有我想象中的那么大，但是那也是我为了脱离当下困境的努力挣扎之一了，作为一名双非本的普通软工学生，没有名校学生优质的资源，但是我依然在大一的时候就把进入互联网大厂作为自己的目标，从去年九月份开始，自学技术，做开源项目，做网上的项目，学各种技术去看MIT和UCB的公开课，图形学，机器学习，全栈开发等各种词汇填满了我大学的前一年半。</p><p>每当结束了一天无聊的上课时光，和紧张的自学时光之后，我躺在床上不免想，我真的热爱这个领域吗，或许不是，那我这么努力是为了什么呢？思虑良久，回答自己，无非碎银几两。挣钱嘛，没什么寒碜的。作家毛姆也说过，对金钱的追求是一个人正常的欲望。手中有几个铜板才能让我更好的赡养父母，追求我自己喜欢的精神生活。</p><p>在想通了这个之后，最近的计划就略微有了改变，在每天可怜的自学时间里，挤出一点时间，去尝试一些挣钱的方法，在这个浮躁且快节奏的社会，通过便捷的社交媒体，我们见证了太多沉浮，有人一夜暴富，一夜成名，站在时代的浪头。但也有人一夜身无分文，落魄潦倒。</p><p>这是时代的特点，我们个体的力量是没有办法做出改变的，时代的每一粒灰，落在每个人头上都是一座山，有时候看着那些年少有为的人不免会心生羡慕，但是无意思的幻想，只会让我更难以全身心的投入残酷的现实。</p><p>始终记住，你一直都是你自己，不要看别人交了答卷，就匆忙交上自己的答卷。</p><p><img src="https://pic.imgdb.cn/item/673089c3d29ded1a8c6a8169.jpg" alt="考场图片"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏客户端开发基本路线</title>
      <link href="/2024/10/13/%E6%B8%B8%E6%88%8F%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E5%9F%BA%E6%9C%AC%E8%B7%AF%E7%BA%BF/"/>
      <url>/2024/10/13/%E6%B8%B8%E6%88%8F%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E5%9F%BA%E6%9C%AC%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/tiao_god/article/details/111146313">计算机图形学（渲染方向）学习全攻略——学术科研篇_图形学blog-CSDN博客</a></p><p><a href="https://www.cnblogs.com/zhy-1992/p/6530359.html">游戏开发完整学习路线（各个版本都有） - 领悟.海洋 - 博客园 (cnblogs.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/445343440">图形学渲染方向个人学习路线整理 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/73151203">Unity游戏开发新手入门自学与进阶学习书籍和教程推荐 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/151238164?utm_id=0">[教程汇总+持续更新]Unity从入门到入坟——收藏这一篇就够了 - 知乎 (zhihu.com)</a></p><p>图形学：<br>入门：GAMES-101&nbsp;<br>实时渲染：GAMES-202、GAMES-104、RTR4(<a href="https://gw-c.nowcoder.com/api/sparta/jump/link?link=https://github.com/Morakito/Real-Time-Rendering-4th-CN">https://github.com/Morakito/Real-Time-Rendering-4th-CN</a>)<br>离线渲染：<br>简单的软光追：<br>Ray&nbsp;Tracing&nbsp;in&nbsp;One&nbsp;<br>Weekend三部曲(<a href="https://gw-c.nowcoder.com/api/sparta/jump/link?link=https://raytracing.github.io">https://raytracing.github.io</a>)<br>进阶：PBRT-V4&nbsp;(<a href="https://gw-c.nowcoder.com/api/sparta/jump/link?link=https://pbr-book.org/4ed/contents">https://pbr-book.org/4ed/contents</a>)<br>图形API：<br>OpenGL：<a href="https://gw-c.nowcoder.com/api/sparta/jump/link?link=https://learnopengl-cn.github.io">https://learnopengl-cn.github.io</a><br>Vulkan：<br>渐进式教程：<a href="https://gw-c.nowcoder.com/api/sparta/jump/link?link=https://vulkan-tutorial.com">https://vulkan-tutorial.com</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Example：<a href="https://gw-c.nowcoder.com/api/sparta/jump/link?link=https://github.com/SaschaWillems/Vulkan">https://github.com/SaschaWillems/Vulkan</a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将Vulkan封装成RHI，写出小引擎：<a href="https://gw-c.nowcoder.com/api/sparta/jump/link?link=https://github.com/BoomingTech/Piccolo">https://github.com/BoomingTech/Piccolo</a><br>引擎原理:<br>GAMES-104,&nbsp;课程附带的&nbsp;<br>Piccolo源码值得一读&nbsp;(<a href="https://gw-c.nowcoder.com/api/sparta/jump/link?link=https://github.com/BoomingTech/Piccolo">https://github.com/BoomingTech/Piccolo</a>)<br>Godot&nbsp;(<a href="https://gw-c.nowcoder.com/api/sparta/jump/link?link=https://github.com/godotengine/godot">https://github.com/godotengine/godot</a>) 以及虚幻5源码<br>引擎使用:<br>Unity：<a href="https://gw-c.nowcoder.com/api/sparta/jump/link?link=https://catlikecoding.com/unity/tutorials/">https://catlikecoding.com/unity/tutorials/</a><br>编程: C<a href="/creation/subject/aec4cfb3acc74278b5a7273c17f8b8df">#：《C#</a>图解教程》<br>Shader：《Unity Shader 入门精要》<br>C++：《C++ Primer》《Effective Modern C++》《深度探索C++对象模型》《C++并发编程实战》<br>Lua：《Lua程序设计》 以及设计模式<br>其他:<br>GDC<br>SIGGRAPH   </p><p>书籍：<br>游戏设计原型与开发</p><p><a href="https://indienova.com/indie-game-development/start-developing-indie-games/">独立游戏开发入门指南 | indienova 独立游戏</a></p><p><img src="https://pic.imgdb.cn/item/670b9783d29ded1a8ceefe96.jpg" alt="插图"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
